# Cyclical figurate numbers
# 
# Problem 61
# 
# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all 
# figurate (polygonal) numbers and are generated by the following formulae:
# 
# Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
# Square	 	    P4,n=n2	 	1, 4, 9, 16, 25, ...
# Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
# Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
# Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
# Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
# 
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting 
# properties.
# 
# The set is cyclic, in that the last two digits of each number is the first two digits 
# of the next number (including the last number with the first).
# 
# Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal 
# (P5,44=2882), is represented by a different number in the set.
# 
# This is the only set of 4-digit numbers with this property.
# 
# Find the sum of the only ordered set of six cyclic 4-digit numbers for which each 
# polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, 
# is represented by a different number in the set.

###
###  Brute force method FAR too slow. Also code is quite messy. Not currently working.
###

require_relative 'euler_methods.rb'

# 6 figures
def euler61(n)


  (10 ** (n - 1)..10 ** n).each do |i|
#   (812000..813000).each do |i|
    tri = false
    squ = false
    pent = false
    hex = false
    hept = false
    oct = false
    catch (:done) do
      puts "AAAA"
      puts i
      total = 0
      (0..n - 2).step(2) do |j|
      #     prevent trailing zeros counting towards an answer
	    if i.to_s[j] == '0'
	      puts "THROW"
	      throw :done
	    end
#       puts j
#     last iteration need to concat the string from the start
	    if j == n - 2
	      current = (i.to_s[j..j + 1] + i.to_s[0..1]).to_i
	    else
	      current = i.to_s[j..j + 3].to_i
        end
	  
	  
        total += current
        puts current
        if tri == false
          if is_triangle(current)
            tri = true
            puts "T"
            if tri == true && squ == true && pent == true && hex == true && hept == true && oct == true
              return total
            end
            next
          end
        end
        if squ == false
          if is_square(current)
            squ = true
            puts "S"
            if tri == true && squ == true && pent == true && hex == true && hept == true && oct == true
              return total
            end
            next
          end
        end
        if pent == false
          if is_pentagon(current)
            pent = true
            puts "P"
            if tri == true && squ == true && pent == true && hex == true && hept == true && oct == true
              return total
            end
            next
          end
        end
        if hex == false
          if is_hexagon(current)
            hex = true
            puts "H"
            if tri == true && squ == true && pent == true && hex == true && hept == true && oct == true
              return total
            end
            next
          end
        end
        if hept == false
          if is_heptagon(current)
            hept = true
            puts "P"
            if tri == true && squ == true && pent == true && hex == true && hept == true && oct == true
              return total
            end
            next
          end
        end
        if oct == false
          if is_octagon(current)
            oct = true
            puts "P"
            if tri == true && squ == true && pent == true && hex == true && hept == true && oct == true
              return total
            end
            next
          end
        end
      

      end
    end
  end
  return false
end
 
n = 10

answer = euler61(n)

puts "The answer to Project Euler problem 61 is #{answer}."

